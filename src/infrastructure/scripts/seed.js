import { sequelize } from "../config/db.js";
import { runSeeds, getAvailableSeedTypes } from "../seeds/index.js";

const args = process.argv.slice(2);
const seedType = args[0]?.replace("--", "");

async function seed() {
  try {
    await sequelize.authenticate();

    const availableTypes = getAvailableSeedTypes();

    if (seedType && !availableTypes.includes(seedType) && seedType !== "all") {
      throw new Error(
        `–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–∏–¥–∞: ${seedType}. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: ${availableTypes.join(", ")}, all`,
      );
    }

    const seedsToRun =
      !seedType || seedType === "all" ? availableTypes : [seedType];

    console.log("üöÄ –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–¥–æ–≤...");
    console.log(`üîß –¢–∏–ø—ã —Å–∏–¥–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${seedsToRun.join(", ")}`);

    const startTime = Date.now();
    const results = await runSeeds(seedsToRun);

    const duration = (Date.now() - startTime) / 1000;
    console.log(`\n‚åõ –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.toFixed(2)} —Å–µ–∫`);

    const success = Object.values(results).filter(Boolean).length;
    const total = seedsToRun.length;

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
    console.log(`  –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${success} –∏–∑ ${total}`);

    if (success < total) {
      throw new Error("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏–¥—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π");
    }

    console.log("‚úÖ –í—Å–µ —Å–∏–¥—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∏–¥–æ–≤:", error.message);
    throw error;
  } finally {
    await sequelize.close();
    console.log("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ");
  }
}

seed()
  .then(() => process.exit(0))
  .catch(() => process.exit(1));
